#include <esp_now.h>
#include <WiFi.h>
#include <DHT.h>

// Define DHT sensor type and pin
#define DHTPIN 14      // DHT22 data pin connected to GPIO 14
#define DHTTYPE DHT22  // DHT 22 (AM2302)

// Initialize DHT sensor
DHT dht(DHTPIN, DHTTYPE);

// Replace with the receiver's MAC Address
uint8_t broadcastAddress[] = {0x10, 0x52, 0x1C, 0x66, 0xD5, 0xE4};

// Structure to send data (must match the receiver structure)
typedef struct struct_message {
  float temperature;
  float humidity;
} struct_message;

// Create an instance of the struct
struct_message myData;

esp_now_peer_info_t peerInfo;

// Callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

void setup() {
  // Start the Serial Monitor
  Serial.begin(115200);

  // Initialize the DHT sensor
  dht.begin();

  // Set the device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Initialize ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Register the Send Callback
  esp_now_register_send_cb(OnDataSent);
  
  // Register peer
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;
  
  // Add peer
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }
}

void loop() {
  // Read temperature and humidity from DHT22
  myData.temperature = dht.readTemperature();
  myData.humidity = dht.readHumidity();

  // Check if any reading failed and exit if so
  if (isnan(myData.temperature) || isnan(myData.humidity)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  // Send the data via ESP-NOW
  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) &myData, sizeof(myData));
   
  if (result == ESP_OK) {
    Serial.println("Sent with success");
    Serial.print("Temperature: "); Serial.print(myData.temperature); Serial.print(" Â°C, ");
    Serial.print("Humidity: "); Serial.print(myData.humidity); Serial.println(" %");
  }
  else {
    Serial.println("Error sending the data");
  }

  // Wait for 2 seconds before sending the next packet
  delay(2000);
}
